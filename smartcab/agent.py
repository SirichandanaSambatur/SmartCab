import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor
        self.epsilon_t=0
        random.seed(555)


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        # Update epsilon using a decay function of your choice
        if testing:
            self.epsilon = 0.0
            self.alpha = 0.0
        else:
            #self.epsilon = self.epsilon - 0.05
             self.epsilon_t += 1.0
            #self.epsilon = 1.0/(self.epsilon_t**2)
            #self.epsilon=math.power(self.alpha,self.epsilon_t)
             self.epsilon = math.fabs(math.cos(self.alpha*self.epsilon_t))
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the
            environment. The next waypoint, the intersection inputs, and the deadline
            are all features available to the agent. """
        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        state = (waypoint,inputs['light'],inputs['oncoming'],inputs['left'])
        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        maxQ = -99999
        for action in self.Q[state]:
            if maxQ<self.Q[state][action]:
                maxQ = self.Q[state][action]
        return maxQ


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        if self.learning:
            self.Q[state]=self.Q.get(state,{None:0.0,'forward':0.0,'left':0.0,'right':0.0})

        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        # When not learning, choose a random action
        action=random.choice(self.valid_actions)
        # When learning, choose a random action with 'epsilon' probability
        if self.learning:
            random_actions=[]
            maxQ_val=self.get_maxQ(state)
            for i in self.Q[state]:
                if maxQ_val==self.Q[state][i]:
                    random_actions.append(i)
            action=random.choice(random_actions)
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards
            when conducting learning. """
        if self.learning:
            self.Q[state][action]= (self.Q[state][action] * (1-self.alpha)) + (reward * self.alpha)
        return


    def update(self):
        """ The update function is called when a time step is completed in the
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn
        return


def run():
    """ Driving function for running the simulation.
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    env = Environment()
    agent = env.create_agent(LearningAgent,learning=True,alpha=0.95,epsilon=0.5)
    env.set_primary_agent(agent,enforce_deadline=True)
    sim = Simulator( env,update_delay=0.015,log_metrics=True,optimized=True)
    sim.run(n_test=10,tolerance=0.01)


if __name__ == '__main__':
    run()
